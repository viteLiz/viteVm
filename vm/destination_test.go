package vm

import (
	"encoding/hex"
	"testing"
)

func TestCodeAnalysis(t *testing.T) {
	tests := []struct {
		code   []byte
		result []byte
	}{
		{[]byte{byte(PUSH1), 0x01, 0x01, 0x01}, []byte{0x40, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH1), byte(PUSH1), byte(PUSH1), byte(PUSH1)}, []byte{0x50, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH8), byte(PUSH8), byte(PUSH8), byte(PUSH8), byte(PUSH8), byte(PUSH8), byte(PUSH8), byte(PUSH8), 0x01, 0x01, 0x01}, []byte{0x7f, 0x80, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH8), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x7f, 0x80, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{0x01, 0x01, 0x01, 0x01, 0x01, byte(PUSH2), byte(PUSH2), byte(PUSH2), 0x01, 0x01, 0x01}, []byte{0x03, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{0x01, 0x01, 0x01, 0x01, 0x01, byte(PUSH2), 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x03, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH3), 0x01, 0x01, 0x01, byte(PUSH1), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x74, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH3), 0x01, 0x01, 0x01, byte(PUSH1), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x74, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{0x01, byte(PUSH8), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{0x01, byte(PUSH8), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH16), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x7f, 0xff, 0x80, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH16), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x7f, 0xff, 0x80, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH16), 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, []byte{0x7f, 0xff, 0x80, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH8), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, byte(PUSH1), 0x01}, []byte{0x7f, 0xa0, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH8), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, byte(PUSH1), 0x01}, []byte{0x7f, 0xa0, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{byte(PUSH32)}, []byte{0x7f, 0xff, 0xff, 0xff, 0x80}},
		{[]byte{byte(PUSH32)}, []byte{0x7f, 0xff, 0xff, 0xff, 0x80}},
		{[]byte{byte(PUSH32)}, []byte{0x7f, 0xff, 0xff, 0xff, 0x80}},
	}
	for i, test := range tests {
		ret := codeBitmap(test.code)
		result := "test " + string(i+1) + " , []byte{"
		for i := range ret {
			result = result + "0x" + hex.EncodeToString(ret[i:i+1])
			if i != len(ret)-1 {
				result = result + ", "
			}
		}
		result = result + "}"
		t.Logf(result)
	}
}
